package {{.Generated_PkgName}}

import(
  {{- range .Imports }}
  {{.}}
  {{- end}}
)

{{- $core := .Core -}}
{{- $curdParamGenerator := .ServiceGenerator.CURDParamGenerator -}}
{{- $targetNode := .ServiceGenerator.TargetNode -}}
{{ $curdNodeGenerator :=  .CURDNodeGenerator}}

type {{.Generated_StructName}} struct{
  entCli *{{$core.EntPkgName}}.Client
}

func New{{.Generated_StructName}} (entCli *{{$core.EntPkgName}}.Client) {{.BizLayer.Generated_PkgName}}.{{.BizLayer.Generated_DataInterfaceName}}{
  return &{{.Generated_StructName}}{
    entCli: entCli,
  }
}

{{ $targetNode := .ServiceGenerator.TargetNode -}}


func (this *{{.Generated_StructName}}) {{.Generated_CreateFuncName}} (ctx context.Context,data map[string]interface{}) (id {{$targetNode.ID.Type.Type.String}},outErr error){
  return {{$core.GeneratedPkgName}}.{{$curdNodeGenerator.GenerateCreateFuncName}}(ctx,data,this.entCli) 
}

func (this *{{.Generated_StructName}}) {{.Generated_QueryFuncName}} (ctx context.Context,query *{{ $curdParamGenerator.Generated_PkgName }}.{{$curdParamGenerator.Adaptor.Core.Generated_QueryRequestStructName}}) (records []*{{ $core.EntPkgName }}.{{ $targetNode.Name }},count int,err error){
  q := &{{$core.GeneratedPkgName}}.{{$core.Generated_QueryRequestStructName}}{
    Filter: query.Filter,
    PageIndex: int(query.PageIndex),
    PageSize: int(query.PageSize),
  }

  records,err = {{$core.GeneratedPkgName}}.{{$curdNodeGenerator.GeneratedQueryFuncName}}(ctx,q,this.entCli) 
  if err != nil{
    return nil,0,err
  }

  // TODO count, optimize , do not parse filter twice
  count,err = {{$core.GeneratedPkgName}}.{{$curdNodeGenerator.GeneratedCountFuncName}}(ctx,this.entCli,q.Filter)
  if err != nil{
    return nil,0,err
  }

  return records,count,nil
}
